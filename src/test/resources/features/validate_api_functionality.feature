Feature: Validate API Functionality for User and Product Management\n\n  Scenario Outline: Create a new user with valid input\n    Given a valid API key\n    When I send a POST request to /users endpoint with the following data:\n      | name         | email                   | password       |\n      | <name>       | <email>                 | <password>     |\n    Then the response status code should be 201\n    And the response body should contain the created user details including a unique ID\n\n    Examples:\n      | name         | email                   | password       |\n      | John Doe     | john.doe@example.com    | securepassword |\n\n  Scenario: Retrieve user details with valid ID\n    Given a valid API key\n    And a user with ID 1 exists in the system\n    When I send a GET request to /users/1 endpoint\n    Then the response status code should be 200\n    And the response body should contain correct user details for ID 1\n\n  Scenario: Attempt to access API without API key\n    When I send a GET request to /users endpoint without an API key\n    Then the response status code should be 401\n    And the response body should contain an error message indicating missing API key\n\n  Scenario Outline: Create a new user with invalid input\n    Given a valid API key\n    When I send a POST request to /users endpoint with the following data:\n      | name         | email                   | password       |\n      | <name>       | <email>                 | <password>     |\n    Then the response status code should be 400\n    And the response body should contain error messages detailing the validation failures\n\n    Examples:\n      | name | email        | password |\n      |      | invalid-email| short    |\n\n  Scenario: Retrieve non-existent user\n    Given a valid API key\n    When I send a GET request to /users/9999 endpoint\n    Then the response status code should be 404\n    And the response body should contain an error message indicating user not found\n\n  Scenario: Retrieve list of available products\n    Given a valid API key\n    And products exist in the system\n    When I send a GET request to /products endpoint\n    Then the response status code should be 200\n    And the response body should contain a list of available products\n\n  Scenario: Retrieve product details with valid ID\n    Given a valid API key\n    And a product with ID 1 exists in the system\n    When I send a GET request to /products/1 endpoint\n    Then the response status code should be 200\n    And the response body should contain correct product details for ID 1\n\n  Scenario: Retrieve non-existent product\n    Given a valid API key\n    When I send a GET request to /products/9999 endpoint\n    Then the response status code should be 404\n    And the response body should contain an error message indicating product not found\n\n  Scenario: Attempt to access API with invalid API key\n    Given an invalid API key\n    When I send a GET request to /users endpoint\n    Then the response status code should be 401\n    And the response body should contain an error message indicating invalid API key\n\n  Scenario: Exceed rate limit of 1000 requests per hour\n    Given a valid API key\n    When I send 1001 API requests within one hour\n    Then the 1001st request should return a 429 Too Many Requests status code\n    And the response body should contain an error message indicating rate limit exceeded\n\n  Scenario: Verify error handling for unsupported HTTP method\n    Given a valid API key\n    When I send a PUT request to /users endpoint\n    Then the response status code should be 405\n    And the response body should contain an error message indicating unsupported HTTP method\n\n  Scenario: Verify error handling for malformed JSON\n    Given a valid API key\n    When I send a POST request to /users endpoint with malformed JSON\n    Then the response status code should be 400\n    And the response body should contain an error message indicating malformed JSON