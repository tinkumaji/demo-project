Feature: Validate API Functionality for User and Product Management\\n\\n  As a QA Tester, I want to validate the functionality of the Sample API so that I can ensure it meets business requirements and provides the expected responses.\\n\\n  Background:\\n    Given a valid API key\\n\\n  Scenario Outline: Create a new user with valid input\\n    When I send a POST request to /users endpoint with the following data:\\n      | name  | email                | password       |\\n      | <name> | <email>              | <password>     |\\n    Then the response status code should be 201\\n    And the response body should contain the created user details including a unique ID\\n\\n    Examples:\\n      | name     | email                  | password       |\\n      | John Doe | john.doe@example.com   | securepassword |\\n\\n  Scenario: Retrieve user details with valid ID\\n    Given a user exists with ID <valid_id>\\n    When I send a GET request to /users/<valid_id> endpoint\\n    Then the response status code should be 200\\n    And the response body should contain the correct user details\\n\\n  Scenario: Attempt to access API without API key\\n    When I send any API request without including an API key\\n    Then the response status code should be 401\\n    And the response body should contain an error message about missing API key\\n\\n  Scenario: Attempt to access API with invalid API key\\n    Given an invalid API key\\n    When I send any API request with the invalid API key\\n    Then the response status code should be 401\\n    And the response body should contain an error message about invalid API key\\n\\n  Scenario Outline: Create a new user with invalid input\\n    When I send a POST request to /users endpoint with the following data:\\n      | name  | email                | password       |\\n      | <name> | <email>              | <password>     |\\n    Then the response status code should be 400\\n    And the response body should contain error messages detailing the validation failures\\n\\n    Examples:\\n      | name | email         | password |\\n      |      | invalid_email | short    |\\n\\n  Scenario: Retrieve non-existent user\\n    When I send a GET request to /users/<non_existent_id> endpoint\\n    Then the response status code should be 404\\n    And the response body should contain an error message about user not found\\n\\n  Scenario: Retrieve list of products\\n    When I send a GET request to /products endpoint\\n    Then the response status code should be 200\\n    And the response body should contain a list of available products\\n\\n  Scenario: Retrieve product details with valid ID\\n    Given a product exists with ID 1\\n    When I send a GET request to /products/1 endpoint\\n    Then the response status code should be 200\\n    And the response body should contain the correct product details\\n\\n  Scenario: Retrieve non-existent product\\n    When I send a GET request to /products/<non_existent_id> endpoint\\n    Then the response status code should be 404\\n    And the response body should contain an error message about product not found\\n\\n  Scenario: Exceed rate limit\\n    Given a valid API key\\n    When I send more than 1000 API requests within one hour using the same API key\\n    Then the response status code should be 429\\n    And the response body should contain an error message about rate limit exceeded\\n\\n  Scenario: Verify error handling for invalid endpoint\\n    When I send a GET request to a non-existent endpoint (e.g., /invalid)\\n    Then the response status code should be 404\\n    And the response body should contain an error message about invalid endpoint\\n\\n  Scenario: Verify error handling for unsupported HTTP method\\n    When I send a PUT request to /users endpoint\\n    Then the response status code should be 405\\n    And the response body should contain an error message about method not allowed